// table is the shp boundary of Japan, and table3 is the shp range of the Japanese offshore study area.

var roi = table3

function get_yearly_FUI(year){
  

    var startDate = ee.Date.fromYMD(year, 1, 1);
    var endDate = ee.Date.fromYMD(year, 12, 30);
    

    function maskL8sr(image) {
      var cloudShadowBitMask = 1 << 3;
      var cloudsBitMask = 1 << 5;


      var qa = image.select('QA_PIXEL');
    
      var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
          .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
      return image.updateMask(mask).multiply(2.75e-05)
          .select("SR_B[0-9]*")
          .copyProperties(image, ["system:time_start","SATELLITE"]);
      
    }
    
    function applyScaleFactors(image) {
      var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
      return image.addBands(opticalBands, null, true)
    }

    var bjL8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2").filterBounds(roi)
                  .filterDate(startDate,endDate).map(maskL8sr)
    var mean = bjL8.median().clip(roi);
    
    
    var viz = {
      bands: ['SR_B4', 'SR_B3', 'SR_B2'],
      min: 0,
      max: 0.4,
    };
    
    Map.addLayer(mean,viz,"BJ_RGB",false);
    
   
    var ndwi = mean.normalizedDifference(["SR_B3", "SR_B5"]);
    var ndwiViz = {min: -0.5, max: 0.5, palette: ['00FFFF', '0000FF']};


    var ndwiMasked = ndwi.clip(table).gte(0);
    Map.addLayer(ndwiMasked, ndwiViz, 'NDWI masked',false);
    

    
    
    
    
    var clip = mean.clip(roi);

    var getFU = function(image){
      var X = image.expression('11.053 * b1 + 6.950 * b2 + 51.135 * b3 + 34.457 * b4',{
          b1: image.select('SR_B1'),
          b2: image.select('SR_B2'),
          b3: image.select('SR_B3'),
          b4: image.select('SR_B4')
      }).rename('X');
    
      var Y = image.expression('1.32 * b1 + 21.053 * b2 + 66.023 * b3 + 18.034 * b4',{
          b1: image.select('SR_B1'),
          b2: image.select('SR_B2'),
          b3: image.select('SR_B3'),
          b4: image.select('SR_B4')
    }).rename('Y');
    
      var Z = image.expression('58.038 * b1 + 34.931 * b2 + 2.606 * b3 + 0.016 * b4',{
        b1: image.select('SR_B1'),
        b2: image.select('SR_B2'),
        b3: image.select('SR_B3'),
        b4: image.select('SR_B4')
    }).rename('Z');
    
      var chrx = X.divide((X.add(Y).add(Z))).rename('chrx');
      var chry = Y.divide((X.add(Y).add(Z))).rename('chry');
      var atan2 = chrx.subtract(0.3333).atan2((chry).subtract(0.3333)).rename('atan2');
      var hue_pre = atan2.multiply(ee.Number(180)).divide(Math.PI).rename('hue_pre');
      var hue = hue_pre < 0 ? (hue_pre + 360) : hue_pre.rename('hue');
      var a = hue.divide(100).rename('a');
      Map.addLayer(a)
      var cor = a.pow(5).multiply(-52.16).add(a.pow(4).multiply(373.81))
        .add(a.pow(3).multiply(-981.3)).add(a.pow(2).multiply(1134.19))
        .add(a.multiply(-533.61)).add(76.72).rename('cor');
      var hueAngle = hue.add(cor).rename('hueAngle');
       Map.addLayer(hueAngle)
      
      var FU = a
        .where(hueAngle.gt(19.0).and(hueAngle.lte(22.741)),1)
        .where(hueAngle.gt(22.741).and(hueAngle.lte(26.337)),2)
        .where(hueAngle.gt(26.337).and(hueAngle.lte(30.439)),3)
        .where(hueAngle.gt(30.439).and(hueAngle.lte(34.906)),4)
        .where(hueAngle.gt(34.906).and(hueAngle.lte(39.769)),5)
        .where(hueAngle.gt(39.769).and(hueAngle.lte(45.129)),6)
        .where(hueAngle.gt(45.129).and(hueAngle.lte(50.665)),7)
        .where(hueAngle.gt(50.665).and(hueAngle.lte(56.435)),8)
        .where(hueAngle.gt(56.435).and(hueAngle.lte(62.186)),9)
        .where(hueAngle.gt(62.186).and(hueAngle.lte(67.957)),10)
        .where(hueAngle.gt(67.957).and(hueAngle.lte(74.572)),11)
        .where(hueAngle.gt(74.572).and(hueAngle.lte(83.346)),12)
        .where(hueAngle.gt(83.346).and(hueAngle.lte(94.037)),13)
        .where(hueAngle.gt(94.037).and(hueAngle.lte(109.054)),14)
        .where(hueAngle.gt(109.054).and(hueAngle.lte(132.999)),15)
        .where(hueAngle.gt(132.999).and(hueAngle.lte(163.084)),16)
        .where(hueAngle.gt(163.084).and(hueAngle.lte(190.779)),17)
        .where(hueAngle.gt(190.779).and(hueAngle.lte(209.994)),18)
        .where(hueAngle.gt(209.994).and(hueAngle.lte(220.977)),19)
        .where(hueAngle.gt(220.977).and(hueAngle.lte(227.168)),20)
        .where(hueAngle.gt(227.168),21).rename('FU');
      
      return image.addBands(FU);
    }
  
  
    
      var visFU = {
        min: 1,
        max: 21,
        palette: [
            '2158BC', '316DC5', '327CBB', '4B80A0', '568F96', '6D9298',
            '698C86', '759E72', '7BA654', '7DAE38', '95B645', '94B660',
            'A5BC75', 'AAB86D', 'ADB55F', 'A8A965', 'AE9F5C', 'B3A053',
            'AF8A44', 'A4600A', 'A45308'
        ]
    };
    

    var year_folder = year+"BJ";
    
    
    var clipedFU = getFU(clip).select('FU').toInt16();
    Map.addLayer(clipedFU,visFU,year_folder+'FU',false);

    var meanDictionary = clipedFU.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: roi,
      scale: 30,
      maxPixels: 1e13
    });
    
    
    
    Export.image.toDrive({
      image:clipedFU,
      scale:30,
      crs:'EPSG:32650',
      maxPixels : 1e13,
      region:roi,
      description:year_folder+"_FUI"
    });
    
     Export.image.toDrive({
      image:ndwi,
      scale:30,
      crs:'EPSG:32650',
      maxPixels:1e13,
      region:roi,
      description:year_folder+'_ndwi'
    });
    
    Export.image.toDrive({
      image:ndwiMasked,
      scale:30,
      crs:'EPSG:32650',
      maxPixels:1e13,
      region:roi,
      description:year_folder+'_ndwiMasked'
    });
    
    
    
}


for(var i = 2013;i<=2023;i++){
  var yearn = i;
  get_yearly_FUI(yearn);
}











